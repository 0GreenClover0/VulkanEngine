#pragma once

#define GLFW_INCLUDE_VULKAN
#include <GLFW/glfw3.h>

#define GLM_ENABLE_EXPERIMENTAL
#define GLM_FORCE_RADIANS
// https://vulkan-tutorial.com/en/Uniform_buffers/Descriptor_pool_and_sets#page_Alignment-requirements
// #define GLM_FORCE_DEFAULT_ALIGNED_GENTYPES
// The perspective projection matrix generated by GLM will use the OpenGL depth range of -1.0 to 1.0 by default.
// We need to configure it to use the Vulkan range of 0.0 to 1.0
#define GLM_FORCE_DEPTH_ZERO_TO_ONE
#include <glm/glm.hpp>
#include <glm/gtc/matrix_transform.hpp>
#include <glm/gtx/hash.hpp>

#include <algorithm>
#include <array>
#include <iostream>
#include <set>
#include <stdexcept>
#include <vector>

#include "ModelLoader.hpp"

class Renderer
{
public:

	void init_vulkan();
	void draw_frame();
	void cleanup();
	void set_framebuffer_as_resized();
	GLFWwindow* get_glfw_window() const;
	void set_glfw_window(GLFWwindow* window);
	VkDevice get_device() const;

	bool was_window_resized() { return framebuffer_resized; }

	const uint32_t MAX_FRAMES_IN_FLIGHT = 2;
	const std::string MODEL_PATH = "models/viking_room.obj";
	const std::string TEXTURE_PATH = "textures/viking_room.png";

#ifdef NDEBUG
	const bool enable_validation_layers = false;
#else
	const bool enable_validation_layers = true;
#endif // NDEBUG

private:

	GLFWwindow* window;
	VkDevice device;
	VkInstance instance;
	VkPhysicalDevice physical_device = VK_NULL_HANDLE;
	VkQueue graphics_queue;
	VkQueue present_queue;
	VkSurfaceKHR surface;
	VkSwapchainKHR swap_chain = VK_NULL_HANDLE;
	VkSwapchainKHR new_swap_chain = VK_NULL_HANDLE;
	VkFormat swap_chain_image_format;
	VkExtent2D swap_chain_extent;
	VkRenderPass render_pass;
	VkDescriptorSetLayout descriptor_set_layout;
	VkPipelineLayout pipeline_layout;
	VkPipeline graphics_pipeline;
	VkCommandPool command_pool;
	VkBuffer vertex_buffer;
	VkDeviceMemory vertex_buffer_memory;
	VkBuffer index_buffer;
	VkDeviceMemory index_buffer_memory;
	VkDescriptorPool descriptor_pool;
	uint32_t mip_levels;
	VkImage texture_image;
	VkDeviceMemory texture_image_memory;
	VkImageView texture_image_view;
	VkSampler texture_sampler;
	VkImage depth_image;
	VkImage color_image;
	VkDeviceMemory color_image_memory;
	VkImageView color_image_view;
	VkDeviceMemory depth_image_memory;
	VkImageView depth_image_view;
	VkSampleCountFlagBits mssa_samples = VK_SAMPLE_COUNT_1_BIT;

	std::vector<VkDescriptorSet> descriptor_sets;
	std::vector<VkBuffer> uniform_buffers;
	std::vector<VkDeviceMemory> uniform_buffers_memory;
	std::vector<VkSemaphore> image_available_semaphores;
	std::vector<VkSemaphore> render_finished_semaphores;
	std::vector<VkImage> swap_chain_images;
	std::vector<VkImageView> swap_chain_image_views;
	std::vector<VkFramebuffer> swap_chain_framebuffers;
	std::vector<VkCommandBuffer> command_buffers;
	std::vector<VkFence> in_flight_fences;
	std::vector<VkFence> images_in_flight;

	std::vector<Vertex> vertices;
	std::vector<uint32_t> indices;

	size_t current_frame = 0;
	bool framebuffer_resized = false;

	const std::vector<const char*> validation_layers = { "VK_LAYER_KHRONOS_validation", "VK_LAYER_LUNARG_monitor"};
	const std::vector<const char*> device_extensions = { VK_KHR_SWAPCHAIN_EXTENSION_NAME };

	struct QueueFamilyIndices
	{
		uint32_t graphics_family;
		uint32_t present_family;
	};

	struct SwapChainSupportDetails
	{
		VkSurfaceCapabilitiesKHR capabilities;
		std::vector<VkSurfaceFormatKHR> formats;
		std::vector<VkPresentModeKHR> present_modes;
	};

	void recreate_swap_chain();
	void create_instance();
	bool check_validation_layer_support();
	void create_surface();
	void pick_physical_device();
	bool is_device_suitable(VkPhysicalDevice device);
	bool find_queue_indices(VkPhysicalDevice device, QueueFamilyIndices& indices);
	bool check_device_extensions(VkPhysicalDevice device);
	void create_logical_device();
	SwapChainSupportDetails query_swap_chain_support(VkPhysicalDevice device);
	VkSurfaceFormatKHR choose_swap_surface_format(const std::vector<VkSurfaceFormatKHR>& available_formats);
	VkPresentModeKHR choose_swap_present_mode(const std::vector<VkPresentModeKHR>& available_present_modes);
	VkExtent2D choose_swap_extent(const VkSurfaceCapabilitiesKHR& capabilities);
	void create_swap_chain(bool recreation = false);
	void create_image_views();
	VkImageView create_image_view(VkImage image, VkFormat format, VkImageAspectFlags aspect_flags, uint32_t mip_levels);
	void create_render_pass();
	void create_graphics_pipeline();
	VkShaderModule create_shader_module(const std::vector<char>& code);
	void create_framebuffers();
	void create_command_pool();
	void create_image(uint32_t width, uint32_t height, uint32_t mip_levels, VkSampleCountFlagBits samples_count,
		VkFormat format, VkImageTiling tiling, VkImageUsageFlags usage,
		VkMemoryPropertyFlags properties, VkImage& image, VkDeviceMemory& image_memory);
	void create_color_resources();
	void create_depth_resources();
	void create_texture_image();
	void generate_mipmaps(VkImage image, VkFormat image_format, int32_t tex_width, int32_t tex_height, uint32_t mip_levels);
	VkSampleCountFlagBits get_max_mssa_sample_count();
	void create_texture_image_view();
	void create_texture_sampler();
	void create_vertex_buffer();
	void create_index_buffer();
	void create_uniform_buffers();
	void create_buffer(VkDeviceSize size, VkBufferUsageFlags usage_flags, VkMemoryPropertyFlags properties,
		VkBuffer& buffer, VkDeviceMemory& buffer_memory);
	VkCommandBuffer begin_single_time_commands();
	void end_single_time_commands(VkCommandBuffer command_buffer);
	void copy_buffer(VkBuffer src_buffer, VkBuffer dst_buffer, VkDeviceSize size);
	void copy_buffer_to_image(VkBuffer buffer, VkImage image, uint32_t width, uint32_t height);
	void transition_image_layout(VkImage image, VkFormat format, VkImageLayout old_layout, VkImageLayout new_layout, uint32_t mip_levels);
	VkFormat find_depth_format();
	bool has_stencil_component(VkFormat format);
	VkFormat find_supported_format(const std::vector<VkFormat>& candidates, VkImageTiling tiling, VkFormatFeatureFlags features);
	uint32_t find_memory_type(uint32_t type_filter, VkMemoryPropertyFlags properties);
	void create_command_buffers();
	void record_command_buffer(int image_index);
	void begin_render_pass(int framebuffer_index);
	void create_sync_objects();
	void create_descriptor_set_layout();
	void update_uniform_buffer(uint32_t current_image);
	void create_descriptor_pool();
	void create_descriptor_sets();
	void cleanup_swap_chain();
};
